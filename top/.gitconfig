# keep repository-specific stuff out of here (e.g. email addresses)
[user]
        name  = Rob Walker

[color]
        ui = auto

[alias]
        lol = log --oneline --decorate --graph
        lolm = log --oneline --decorate --graph --no-merges
        lola = log --oneline --decorate --graph --all
        lolam = log --oneline --decorate --graph --all --no-merges
        ls = ls-tree HEAD --name-only
        lsR = ls-tree -r HEAD --name-only
        ours = ! git diff :1:$1 :2:$1 && exit $? && :
        theirs = ! git diff :1:$1 :3:$1 && exit $? && :
        slow-heads = ! git rev-list --topo-order --all --children | "while read -r commit children;\
                   do\
                      [ -z \"$children\" ] && git --no-pager log -1 --decorate --oneline $commit;\
                   done" &&\
                   exit $? && :
        heads = ! eval $(git rev-list --all --children | awk '{ if (NF==1) print \"git --no-pager log -1 --decorate --oneline \" $1 \" && \" }END{print \"true\"}') && exit $? && :
        vheads = ! eval $(git rev-list --all --children | awk '{ if (NF==1) print \"git --no-pager log -1 --decorate \" $1 \" && \" }END{print \"true\"}') && exit $? && :
        recur = ! git "${@}" && git submodule foreach --recursive git "${@}" && exit $? && :
        smoosh = ! git commit --amend -C "$(git log -1 --pretty=format:%H)" && exit $? && :
        # "branch as commit message" take the current branch name as the commit message
        bacm = ! git rev-parse --abbrev-ref HEAD | tr - ' ' | git commit -F - && exit $? && :
        # outputs all branches with an upstream attribute
        hub-branches = ! "for name in $(git config --name-only --get-regexp ^branch.*.upstream$) ;\
                          do\
                            name=${name%.upstream};\
                            echo ${name#branch.};\
                          done" && \
                          exit $? && :
        # outputs a branch's upstream attribute
        hub-upstream = ! git config branch.${1}.upstream && exit $? && :
        # sync a single branch, assumes branch.$1.upstream and branch.$1.origin are set
        hub-sync-branch = ! branch=$(git rev-parse --abbrev-ref HEAD) && \
                            git fetch -f --recurse-submodules=no $(git hub-upstream ${1}) ${1} && \
                            git checkout ${1} && \
                            git reset --hard FETCH_HEAD && \
                            git push -f --recurse-submodules=no $(git config branch.${1}.remote) ${1} && \
                            git checkout ${branch} && \
                            exit $? && :
        # resync all branches with an "upstream" config attribute
        hub-sync = ! git diff --quiet || (echo 'error: diffs exist' && false) && \
                     "for branch in $(git hub-branches); \
                      do \
                         git hub-sync-branch $branch; \
                     done" && \
                     git fetch -fp --recurse-submodules=no origin && \
                     exit $? && :
        # push current branch and create a PR, takes all the args that hub pull-request takes
        hub-pr = ! branch=$(git rev-parse --abbrev-ref HEAD) && \
                   [ "$branch" != master ] || (echo 'error: no PRs from master' && false) && \
                   git push --set-upstream origin "$branch" && \
                   hub pull-request
        # clone a fork $1 is the repository $2 is the upstream org/user
        #  e.g. if you've forked this "home" repository and want to do PRs, you'd run
        #  git hub-clone github.com:you/home cornholington
        hub-clone = ! [ ${1}x != x ] && [ ${2}x != x ] || (echo usage: 'git hub-clone <origin> <upstream-user>' && false) &&\
                      basename="${1##*/}" && \
                      dir="${basename%.git}" && \
                      git clone "$1" && \
                      (cd "$dir" && \
                       git remote add upstream "${1%:*}:${2}/$basename" &&\
                       git config branch.master.upstream upstream) && \
                       exit $? && :
        grep-sed = ! git --no-pager grep -I -l "$1" | "while read -r file ; do \
                                                         echo fixing $file; \
                                                         sed -i~ \"$2\" \"$file\"; \
                                                       done" && \
                       exit $? && :

[core]
	excludesfile = ~/.gitexcludes
        deltaBaseCacheLimit = 1G

[push]
	default = simple
[merge]
	renamelimit = 10000
[rebase]
	autosquash = true
